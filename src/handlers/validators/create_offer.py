from decimal import Decimal, InvalidOperation

from src.database.models.offer import OfferType
from src.keyboards.offer_type import offer_type_keyboard


async def name_validator(message):
    if len(message.text) > 64:
        return await message.answer(
            text="–ù–∞ –∂–∞–ª—å, –Ω–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –¥–æ–∑–≤–æ–ª—è—î –¥–∞–≤–∞—Ç–∏ –æ—Ñ–µ—Ä–∞–º —Ç–∞–∫—ñ –¥–æ–≤–≥—ñ –Ω–∞–∑–≤–∏. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–∏–º–≤–æ–ª—ñ–≤ - 64"
        )
    return None


async def telegram_channel_url_validator(message):
    if "t.me/" not in message.text:
        return await message.answer(
            text="–ß–æ–º—É—Å—å —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∑–º–æ–≥–ª–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—èüòÖ\n"
            "–ü–µ—Ä–µ–≤—ñ—Ä, —á–∏ —Ü–µ –¥—ñ–π—Å–Ω–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ Telegram-–∫–∞–Ω–∞–ª?"
        )
    return None


async def offer_type_validator(message):
    types = [e.value for e in OfferType]
    if message.text not in types:
        return await message.answer(
            text="–£ —Å–∏—Å—Ç–µ–º—ñ —î —Å—É–≤–æ—Ä—ñ –ø—Ä–∞–≤–∏–ª–∞ —â–æ–¥–æ —Ç–∏–ø—ñ–≤ –æ—Ñ–µ—Ä—ñ–≤\n" "–û–±–µ—Ä–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –æ–¥–∏–Ω —ñ–∑ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–∏—Ö –Ω–∏–∂—á–µ:",
            reply_markup=offer_type_keyboard,
        )
    return None


async def price_per_subscriber_validator(message):

    # todo message.text.isdigit

    try:
        num = Decimal(message.text)
        if num < 0 or num > 9999:
            return await message.answer(
                text="–ü–ª–∞—Ç–∞ –∑–∞ –æ–¥–Ω–æ–≥–æ –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∞ –º–∞—î –±—É—Ç–∏ –≤ –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ –≤—ñ–¥ 0 –¥–æ 9999. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑:"
            )
        elif num.as_tuple().exponent < -2:
            return await message.answer(text="–ú–æ–∂–Ω–∞ –≤–∫–∞–∑–∞—Ç–∏ –ª–∏—à–µ –¥–≤–∞ –∑–Ω–∞–∫–∏ –ø—ñ—Å–ª—è –∫–æ–º–∏. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑:")
    except InvalidOperation:
        return await message.answer(text="–í–≤–µ–¥–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ:")

    return num
